// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  email     String      @unique
  role      String      @default("user")
  sessions  Session[]
  comments  Comment[]
  userTeams UserTeams[]
  teams     Team[]      @relation(fields: [teamId], references: [id])
  teamId    Int?
  avatar    String
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
  team      Team?    @relation(fields: [teamId], references: [id])
  teamId    Int?
  isPublic  Boolean  @default(false)
}

model File {
  id        Int       @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  project   Project   @relation(fields: [projectId], references: [id])
  projectId Int
  comments  Comment[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  file        File     @relation(fields: [fileId], references: [id])
  fileId      Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  coordinateX Float
  coordinateY Float
}

model Team {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  projects    Project[]
  name        String
  description String?
  userTeams   UserTeams[]
  users       User[]
}

model UserTeams {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  team   Team? @relation(fields: [teamId], references: [id])
  userId Int?
  teamId Int?
}
