// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  email     String      @unique
  role      String      @default("user")
  sessions  Session[]
  comments  Comment[]
  userTeams UserTeams[]
  teams     Team[]      @relation(fields: [teamId], references: [id])
  teamId    String?
  avatar    String
  Reply     Reply[]
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             String?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

model Project {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
  team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?
  isPublic  Boolean  @default(false)
}

model File {
  id           String    @id @default(uuid())
  name         String
  url          String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  project      Project?  @relation(fields: [projectId], references: [id])
  projectId    String?
  comments     Comment[]
  filePath     String    @default("/image.png")
  fileType     String    @default("image")
  height       Int       @default(0)
  width        Int       @default(0)
  thumbnailUrl String    @default("")
}

model Comment {
  id          String   @id @default(uuid())
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  file        File?    @relation(fields: [fileId], references: [id])
  fileId      String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  coordinateX Float
  coordinateY Float
  isResolved  Boolean  @default(false)
  replies     Reply[]
}

model Team {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  projects    Project[]
  name        String
  description String?
  userTeams   UserTeams[]
  users       User[]
}

model UserTeams {
  id     String  @id @default(uuid())
  user   User?   @relation(fields: [userId], references: [id])
  team   Team?   @relation(fields: [teamId], references: [id])
  userId String?
  teamId String?
}

model Reply {
  id         String   @id @default(uuid())
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isResolved Boolean  @default(false)
  comment    Comment? @relation(fields: [commentId], references: [id])
  commentId  String?
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}
